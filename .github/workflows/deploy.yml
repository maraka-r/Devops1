name: Deploy to EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm i

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Build application
        run: npm run build

      - name: Run lint
        run: npm run lint

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build app
        run: npm run build

      - name: Build Docker image
        run: docker build -t maraka-app:${{ github.sha }} .

      - name: Save Docker image to tar
        run: docker save maraka-app:${{ github.sha }} | gzip > image.tar.gz

      - name: Set up SSH access to EC2
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Add EC2 to known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Upload artifacts to EC2
        run: |
          scp image.tar.gz ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/
          scp docker-compose.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/
          scp prometheus.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/
          scp alertmanager.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/
          scp -r grafana ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/

      - name: Deploy on EC2
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
            set -e

            # CrÃ©er rÃ©pertoire app si nÃ©cessaire
            mkdir -p ~/app

            # DÃ©compresser et charger l'image Docker
            gunzip -c ~/image.tar.gz | docker load

            # Copier les fichiers dans ~/app
            mv ~/docker-compose.yml ~/app/
            mv ~/prometheus.yml ~/app/
            mv ~/alertmanager.yml ~/app/
            
            # Supprimer et remplacer le rÃ©pertoire grafana
            rm -rf ~/app/grafana
            mv ~/grafana ~/app/
            
            mv ~/image.tar.gz ~/app/

            cd ~/app

            # Modifier docker-compose.yml pour utiliser l'image tagguÃ©e
            sed -i 's|image: maraka-app:latest|image: maraka-app:${{ github.sha }}|' docker-compose.yml

            # Injection des variables d'environnement
            echo "ðŸ”§ Injection des variables d'environnement..."
            sleep 10  # Attendre que le conteneur soit prÃªt
            ./scripts/sync-env.sh app-app-1

            # Supprimer nginx.conf s'il est mentionnÃ©
            sed -i '/nginx.conf/d' docker-compose.yml || true

            # Lancer docker-compose
            docker-compose down || true
            docker-compose up -d

            # Nettoyage images non utilisÃ©es
            docker image prune -f

            # Nettoyage post-dÃ©ploiement
            echo "Nettoyage des fichiers temporaires..."
            rm -f ~/deploy.tar.gz
            rm -rf ~/deploy

            echo "Nettoyage des images Docker non utilisÃ©es..."
            docker image prune -af --filter "until=24h"

            echo "Nettoyage des volumes Docker non utilisÃ©s..."
            docker volume prune -f

            echo "Nettoyage terminÃ©."
          EOF